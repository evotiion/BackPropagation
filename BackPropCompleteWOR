import numpy as np
import matplotlib.pyplot as plt
import math

#1-2-1 NN
def activation(x):
    #soft plus
    ex = math.e ** x
    ret = math.log(1+ex)
    return ret
    #return math.log(math.e ** x + 1)

y1 = 0
y2 = 0
x1 = 0
x2 = 0
bias1 = 0
bias2 = 0
def calcTopNN(dosage,weight1,weight3,bias1):
    global y1
    w1 = weight1
    w3 = weight3
    b1 = bias1

    x1 = dosage * w1 + b1
    y1 = activation(x1)
    #print(y1)
    val1 = y1 * w3
    #print(val1)
    return (val1)
def calcBottomNN(dosage,weight2,weight4,bias2):
    global y2
    w2 = -3.53
    w4 = weight4
    b2 = bias2

    x2 = dosage * w2 + b2
    y2 = activation(x2)
    #print(y2)
    val2 = y2 * w4
    #print(val2)
    return (val2)

def calcNN(dosage,bias3,weight1, weight2,weight3,weight4,bias1, bias2):
    b3 = bias3
    val1 = calcTopNN(dosage,weight1, weight3,bias1)
    val2 = calcBottomNN(dosage,weight2,weight4,bias2)
    sum = val1 + val2
    #print(sum)
    #return (sum)
    return (sum + b3)
xpoints = np.array([0, .1, .2, .3, .4, .5, .6, .7, .8, .9, 1])
yvals = [0,1,2,3,4,5,6,7,8,9,10]

#Here are the observed yvalues.
yvalsObs0 = 0.006334761940589573
yvalsObs5 = 1.000980681806214
yvalsObs10 = -0.00486963403567886

learningRate = .1
bias3 = 0

weight1 = 2.74
weight2 = -1.13
#weight3 = .36
#weight4 = .63

notDone = True
while notDone:
    val = np.random.randn()
    if val < 1 and val > -1:
        weight3 = val
        notDone = False
notDone = True
while notDone:
    val = np.random.randn()
    if val < 1 and val > -1:
        weight4 = val
        notDone = False
stepSize = -100
#while (stepSize < -.01):
numLoops = 10000
for x in range(1,numLoops):
    yvals[0] = calcNN(xpoints[0],bias3,weight1, weight2, weight3,weight4,bias1,bias2)
    y11 = y1
    x11 = x1
    y21 = y2
    x21 = x2
    yvals[1] = calcNN(xpoints[1],bias3,weight1, weight2, weight3,weight4,bias1,bias2)
    yvals[2] = calcNN(xpoints[2],bias3,weight1, weight2, weight3,weight4,bias1,bias2)
    yvals[3] = calcNN(xpoints[3],bias3,weight1, weight2, weight3,weight4,bias1,bias2)
    yvals[4] = calcNN(xpoints[4],bias3,weight1, weight2, weight3,weight4,bias1,bias2)
    yvals[5] = calcNN(xpoints[5],bias3,weight1, weight2, weight3,weight4,bias1,bias2)
    y12 = y1
    x12 = x1
    y22 = y2
    x22 = x2
    yvals[6] = calcNN(xpoints[6],bias3,weight1, weight2, weight3,weight4,bias1,bias2)
    yvals[7] = calcNN(xpoints[7],bias3,weight1, weight2, weight3,weight4,bias1,bias2)
    yvals[8] = calcNN(xpoints[8],bias3,weight1, weight2, weight3,weight4,bias1,bias2)
    yvals[9] = calcNN(xpoints[9],bias3,weight1, weight2, weight3,weight4,bias1,bias2)
    yvals[10] = calcNN(xpoints[10],bias3,weight1, weight2, weight3,weight4,bias1,bias2)
    y13 = y1
    x13 = y1
    y23 = y2
    x23 = x2
    dSSR_db3 = -2*(yvalsObs0 - yvals[0]) -2*(yvalsObs5 - yvals[5]) -2*(yvalsObs10 - yvals[10])
    print(dSSR_db3)
    stepSize = dSSR_db3 * learningRate
    print(stepSize)
    bias3 -= stepSize
    dSSR_dw3 = -2*(yvalsObs0 - yvals[0])*y11 -2*(yvalsObs5 - yvals[5])*y12 -2*(yvalsObs10 - yvals[10])*y13
    stepSize = dSSR_dw3 * learningRate
    print(stepSize)
    weight3 -= stepSize

    dSSR_dw4 = -2*(yvalsObs0 - yvals[0])*y21 -2*(yvalsObs5 - yvals[5])*y22 -2*(yvalsObs10 - yvals[10])*y23
    stepSize = dSSR_dw4 * learningRate
    print(stepSize)
    weight4 -= stepSize

    dSSR_db1 = -2 * (yvalsObs0 - yvals[0]) * weight3 * ((math.e ** x11) / (1 + math.e ** x11)) \
               - 2 * (yvalsObs5 - yvals[5]) * weight3 * ((math.e ** x12) / (1 + math.e ** x12)) \
               - 2 * (yvalsObs10 - yvals[10]) * weight3 * ((math.e ** x13) / (1 + math.e ** x13))
    # print("dSSR_db1 = " + str(dSSR_db1))
    stepSize = dSSR_db1 * learningRate
    # print(stepSize)
    bias1 -= stepSize

    dSSR_db2 = -2 * (yvalsObs0 - yvals[0]) * weight4 * ((math.e ** x21) / (1 + math.e ** x21)) \
               - 2 * (yvalsObs5 - yvals[5]) * weight4 * ((math.e ** x22) / (1 + math.e ** x22)) \
               - 2 * (yvalsObs10 - yvals[10]) * weight4 * ((math.e ** x23) / (1 + math.e ** x23))
    # print("dSSR_db2 = " + str(dSSR_db2))
    stepSize = dSSR_db2 * learningRate
    # print(stepSize)
    bias2 -= stepSize

    dSSR_dw1 = -2 * (yvalsObs0 - yvals[0]) * weight3 * ((math.e ** x11) / (1 + math.e ** x11)) * xpoints[0] \
               - 2 * (yvalsObs5 - yvals[5]) * weight3 * ((math.e ** x12) / (1 + math.e ** x12)) * xpoints[5] \
               - 2 * (yvalsObs10 - yvals[10]) * weight3 * ((math.e ** x13) / (1 + math.e ** x13)) * xpoints[10]
    # print("dSSR_dw1 = " + str(dSSR_dw1))
    stepSize = dSSR_dw1 * learningRate
    # print(stepSize)
    weight1 -= stepSize

    if x < 5 or x % 50 == 49:
        ypoints = np.array(yvals)
        plt.plot(xpoints, ypoints, marker="o", color="red")


    b1Actual = -1.43
    b2Actual = .57
    b3Actual = 2.61
    w1Actual = 3.34
    w2Actual = -3.53
    w3Actual = -1.22
    w4Actual = -2.3

    yvals[0] = calcNN(xpoints[0],b3Actual,w1Actual, w2Actual, w3Actual,w4Actual, b1Actual, b2Actual)
    yvals[1] = calcNN(xpoints[1],b3Actual,w1Actual, w2Actual, w3Actual,w4Actual, b1Actual, b2Actual)
    yvals[2] = calcNN(xpoints[2],b3Actual,w1Actual, w2Actual, w3Actual,w4Actual, b1Actual, b2Actual)
    yvals[3] = calcNN(xpoints[3],b3Actual,w1Actual, w2Actual, w3Actual,w4Actual, b1Actual, b2Actual)
    yvals[4] = calcNN(xpoints[4],b3Actual,w1Actual, w2Actual, w3Actual,w4Actual, b1Actual, b2Actual)
    yvals[5] = calcNN(xpoints[5],b3Actual,w1Actual, w2Actual, w3Actual,w4Actual, b1Actual, b2Actual)
    yvals[6] = calcNN(xpoints[6],b3Actual,w1Actual, w2Actual, w3Actual,w4Actual, b1Actual, b2Actual)
    yvals[7] = calcNN(xpoints[7],b3Actual,w1Actual, w2Actual, w3Actual,w4Actual, b1Actual, b2Actual)
    yvals[8] = calcNN(xpoints[8],b3Actual,w1Actual, w2Actual, w3Actual,w4Actual, b1Actual, b2Actual)
    yvals[9] = calcNN(xpoints[9],b3Actual,w1Actual, w2Actual, w3Actual,w4Actual, b1Actual, b2Actual)
    yvals[10] = calcNN(xpoints[10],b3Actual,w1Actual, w2Actual, w3Actual,w4Actual, b1Actual, b2Actual)

    if x < 5 or x % 50 == 49:
        ypoints = np.array(yvals)
        plt.plot(xpoints, ypoints, marker="o", color="black")
        plt.show()
